/*
 * ComeCocosView.java
 */

package comecocos;

import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * The application's main frame.
 */
public class ComeCocosView extends FrameView implements Runnable{

    public ComeCocosView(SingleFrameApplication app) throws Exception {
        super(app);
        initComponents();
        t = null;
        soltarCoco = null;
        intro = new Player("src/comecocos/resources/pacman_intro.wav");
        cocoNormal = new Player("src/comecocos/resources/siren.wav");
        cocoWeak = new Player("src/comecocos/resources/weak.wav");
        cocoComido = new Player("src/comecocos/resources/ojos.wav");
        waka = new Player("src/comecocos/resources/waka.wav");
        die = new Player("src/comecocos/resources/die.mp3");
        
        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
        thread.start();
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = ComeCocosApp.getApplication().getMainFrame();
            aboutBox = new ComeCocosAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        ComeCocosApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        laberinto1 = new comecocos.Laberinto();
        panelPuntuaciones1 = new comecocos.PanelPuntuaciones();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(100, 100));
        mainPanel.setLayout(new java.awt.BorderLayout());

        laberinto1.setName("laberinto1"); // NOI18N
        laberinto1.setPreferredSize(new java.awt.Dimension(590, 200));

        javax.swing.GroupLayout laberinto1Layout = new javax.swing.GroupLayout(laberinto1);
        laberinto1.setLayout(laberinto1Layout);
        laberinto1Layout.setHorizontalGroup(
            laberinto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 591, Short.MAX_VALUE)
        );
        laberinto1Layout.setVerticalGroup(
            laberinto1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 433, Short.MAX_VALUE)
        );

        mainPanel.add(laberinto1, java.awt.BorderLayout.CENTER);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(comecocos.ComeCocosApp.class).getContext().getResourceMap(ComeCocosView.class);
        panelPuntuaciones1.setBackground(resourceMap.getColor("panelPuntuaciones1.background")); // NOI18N
        panelPuntuaciones1.setName("panelPuntuaciones1"); // NOI18N

        javax.swing.GroupLayout panelPuntuaciones1Layout = new javax.swing.GroupLayout(panelPuntuaciones1);
        panelPuntuaciones1.setLayout(panelPuntuaciones1Layout);
        panelPuntuaciones1Layout.setHorizontalGroup(
            panelPuntuaciones1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 591, Short.MAX_VALUE)
        );
        panelPuntuaciones1Layout.setVerticalGroup(
            panelPuntuaciones1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        mainPanel.add(panelPuntuaciones1, java.awt.BorderLayout.SOUTH);

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SPACE, 0));
        jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem2);

        jSeparator1.setName("jSeparator1"); // NOI18N
        fileMenu.add(jSeparator1);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(comecocos.ComeCocosApp.class).getContext().getActionMap(ComeCocosView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem3.setText(resourceMap.getString("jMenuItem3.text")); // NOI18N
        jMenuItem3.setName("jMenuItem3"); // NOI18N
        helpMenu.add(jMenuItem3);

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 421, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(mainPanel, "¿Reiniciar partida?")){
            parar();
            laberinto1.stopCocos();
            if(t!=null)
                t.stop();
            if(soltarCoco!=null)
                soltarCoco.stop();
            try {
                cocoNormal.Stop();
            } catch (Exception ex) {
                Logger.getLogger(ComeCocosView.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                waka.Stop();
            } catch (Exception ex) {
                Logger.getLogger(ComeCocosView.class.getName()).log(Level.SEVERE, null, ex);
            }
            puntuacion = 0;
            vidas = 3;
            reiniciar();
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if(getParado()){
            reanudar();
            laberinto1.brighter();
            laberinto1.drawMessage("");
        }
        else{
            pausar();
            laberinto1.darker();
            laberinto1.drawMessage("Paused",Color.yellow.darker());
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private comecocos.Laberinto laberinto1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private comecocos.PanelPuntuaciones panelPuntuaciones1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    //POR JAVI:
    Player intro;
    Player cocoNormal;
    Player cocoWeak;
    Player cocoComido;
    Player waka;
    Player die;
    Thread t;
    Thread soltarCoco;






    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;

    Thread thread = new Thread(this);
    private int delay = 15;
    private boolean continuar = true;
    private boolean suspender = false;
    private int puntuacion = 0;
    private int vidas = 3;
    long t_antes = new Date().getTime();
    long t_despues;

    public void run(){
        laberinto1.stopCocos();
        
        
        try{
            intro.Play();
            laberinto1.drawMessage("Get Ready!");
            soltarCoco = new Thread(){
            @Override
            public void run(){
                while(true)
                    {
                    try {
                        Thread.sleep(6000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(ComeCocosView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                laberinto1.releaseCoco();
            }
                }
        };
            
            Thread.sleep(5000);
            laberinto1.drawMessage("");
            laberinto1.reanudarCocos();
            soltarCoco.start();
            cocoNormal.Play();
            
            while(continuar){
                Thread.sleep(12);
                synchronized(this){
                    while(suspender){
                        wait();
                    }
                }



                if(laberinto1.pacman_muerto)
                    {
                    parar();
                    laberinto1.stopCocos();
                    if(t!=null)
                        t.stop();
                    if(soltarCoco!=null)
                        soltarCoco.stop();
                    cocoNormal.Stop();
                    waka.Stop();
                    die.Play();
                    Thread.sleep(3);
                    panelPuntuaciones1.setVidas(--vidas);
                    if(vidas < 0)
                        laberinto1.drawMessage("Game Over  ");
                    else{
                        reiniciar();
                    }
                }

                if(laberinto1.areComidos()){
                    if(laberinto1.areweakCocos())
                        cocoWeak.Pausa();
                    else
                        cocoNormal.Pausa();
                    cocoComido.Play();
                    }
                else
                    {
                    cocoComido.Stop();
                    if(laberinto1.areweakCocos())
                        cocoWeak.Continuar();
                    else
                        cocoNormal.Continuar();
                   }



                if(laberinto1.areweakCocos())
                    if(laberinto1.isNuevoFantasmaComido())
                        {
                        int n=laberinto1.getFantasmasMuertos();
                        switch(n){
                            case 1:
                                puntuacion+=200;
                                break;
                            case 2:
                                puntuacion+=400;
                                break;
                            case 3:
                                puntuacion+=800;
                                break;
                            case 4:
                                puntuacion+=1600;
                                break;
                                }
                                laberinto1.setNuevoFantasmaComido(false);
                                panelPuntuaciones1.setPuntuacion(puntuacion);
                            }

                switch(laberinto1.moverPacMan()){
                    case Laberinto.LITTLEPOINT :
                        waka.Play();
                        puntuacion+=10;
                        panelPuntuaciones1.setPuntuacion(puntuacion);
                        break;
                    case Laberinto.BIGPOINT :
                        waka.Play();
                        puntuacion+=50;
                        panelPuntuaciones1.setPuntuacion(puntuacion);

                        //hebra para que vaya mas fluido el sonido
                        t = new Thread(){
                        @Override
                        public void run (){
                            try {

                            cocoNormal.Stop();
                            cocoWeak.Play();
                            laberinto1.setweakCocos(true);
                            Thread.sleep(6000);
                            cocoWeak.Stop();
                            cocoNormal.Play();
                            laberinto1.setweakCocos(false);
                                this.finalize();
                                } catch (Exception ex) {
                            Logger.getLogger(ComeCocosView.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            catch (Throwable ex) {
                                Logger.getLogger(ComeCocosView.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }};
                        t.start();
                        /////////////////////////////////////////////
                        
                        break;
                    case Laberinto.GHOST :
                        
                        break;
                    default:
                        break;
                }
                laberinto1.repaint();

        
            } //end while(continuar)
        }
        catch(InterruptedException e){
            System.out.println("Hilo interrumpido: " + e);
        }
        catch (Exception ex) {
                Logger.getLogger(ComeCocosView.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    public void parar(){
        continuar = false;
    }

    public void pausar(){
        if(t!=null)
            t.suspend();
        if(soltarCoco!=null)
            soltarCoco.suspend();
        suspender = true;
        laberinto1.stopCocos();
        if(laberinto1.areComidos())
            try {
            cocoComido.Pausa();
        } catch (Exception ex) {
            Logger.getLogger(ComeCocosView.class.getName()).log(Level.SEVERE, null, ex);
        }
        else
        if(laberinto1.areweakCocos())
            try {
            cocoWeak.Pausa();
        } catch (Exception ex) {
            Logger.getLogger(ComeCocosView.class.getName()).log(Level.SEVERE, null, ex);
        }
        else
            try {
            cocoNormal.Pausa();
        } catch (Exception ex) {
            Logger.getLogger(ComeCocosView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public synchronized void reanudar(){
        if(t!=null)
            t.resume();
        if(soltarCoco!=null)
            soltarCoco.resume();
        suspender = false;
        laberinto1.reanudarCocos();
        if(laberinto1.areComidos())
            try {
            cocoComido.Continuar();
        } catch (Exception ex) {
            Logger.getLogger(ComeCocosView.class.getName()).log(Level.SEVERE, null, ex);
        }
        else
        if(laberinto1.areweakCocos())
            try {
            cocoWeak.Continuar();
        } catch (Exception ex) {
            Logger.getLogger(ComeCocosView.class.getName()).log(Level.SEVERE, null, ex);
        }
        else
            try {
            cocoNormal.Continuar();
        } catch (Exception ex) {
            Logger.getLogger(ComeCocosView.class.getName()).log(Level.SEVERE, null, ex);
        }
        continuar=true;
        notify();
    }

    synchronized public boolean getParado(){
        return suspender;
    }

    public int getPuntuacion(){
        return puntuacion;
    }

    private void reiniciar(){
        laberinto1.reiniciar();
        reanudar();     //reanudamos la partida por si fue pausada
        thread.interrupt();
        thread = new Thread(this);
        thread.start();
    }
}
